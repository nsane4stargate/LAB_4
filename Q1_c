#pragma config(Sensor, S1,     touchSensor,    sensorEV3_Touch)
#pragma config(Sensor, S2,     gyroSensor,     sensorEV3_Gyro, modeEV3Gyro_RateAndAngle)
#pragma config(Sensor, S3,     colorSensor,    sensorEV3_Color, modeEV3Color_Color)
#pragma config(Sensor, S4,     sonarSensor,    sensorEV3_Ultrasonic)
#pragma config(Motor,  motorB,          LEFT,          tmotorEV3_Large, PIDControl, driveLeft, encoder)
#pragma config(Motor,  motorC,          RIGHT,         tmotorEV3_Large, PIDControl, driveRight, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

float currentSpeed = 0;
float nTurnRatio=50;
int bumpCounter = 0;
//int BumpedValue;

task motorControl(){
	//resetBumpedValue(S1);
	while(true)
	{
		//check for turn
		// not turn until the touch sensor detects a bump
		if(getBumpedValue(S1)> 0 )
		{
			//BumpedValue = getBumpedValue(S1);
			if(bumpCounter == 0){
				bumpCounter++;
				// turn in opposite direction only when the previous turn in completed
				if(currentSpeed==0)
				{
					currentSpeed=30;
					nTurnRatio*=-1;
				}
				resetBumpedValue(S1);
			}
			// make a stop while turning
			else{
				//currentSpeed = 0;
				setMotorSpeed(motorB,0);
				setMotorSpeed(motorC,0);
				bumpCounter++;
				bumpCounter -= getBumpedValue(S1);
			}
		}

		sleep(100);
	} //End the while loop
}

task main()
{
	resetBumpedValue(S1);
	bumpCounter = 0;
	startTask(motorControl);
	while(true)
	{
		if(currentSpeed)
		{
			// long masterWheelRotatedAngle = (long)(desiredAngle1 * (trackWidth / 2)) / (wheel_diameter / 2);
			setMotorSyncEncoder(motorC,motorB,nTurnRatio,(360*60/29)*2,currentSpeed);
			// use this command to avoid providing a wait time
			waitUntilMotorStop(motorC);
			waitUntilMotorStop(motorB);
			// after a completed turn, the robot will stop and wait for next bumped occure, then make a turn again
			currentSpeed=0;
			sleep(100);
		}
	}
}
